" --------
" vim-plug
" --------

call plug#begin('~/.vim/plugged')


" l&f
Plug 'mhinz/vim-startify'
Plug 'altercation/vim-colors-solarized'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'ryanoasis/vim-devicons'
Plug 'zhaocai/GoldenView.Vim'

" vcs
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'gregsexton/gitv'

" search
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" navigation
Plug 'easymotion/vim-easymotion'

" general text editing
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'ervandew/supertab'
Plug 'scrooloose/nerdcommenter'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'wakatime/vim-wakatime'
Plug 'vim-syntastic/syntastic'
Plug 'jeetsukumaran/vim-filebeagle'
Plug 'ntpeters/vim-better-whitespace'
Plug 'tpope/vim-eunuch'
Plug 'justinmk/vim-sneak'
Plug 'janko-m/vim-test'

Plug 'xolox/vim-misc'
Plug 'xolox/vim-easytags'
Plug 'majutsushi/tagbar'

Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

Plug 'metakirby5/codi.vim'
Plug 'benmills/vimux'

Plug 'godlygeek/tabular'

Plug 'terryma/vim-multiple-cursors'

Plug 'vim-scripts/BufOnly.vim'


" clojure
"Plug 'clojure-vim/async-clj-omni'
Plug 'tpope/vim-sexp-mappings-for-regular-people'
Plug 'guns/vim-sexp'
Plug 'tpope/vim-fireplace'
Plug 'tpope/vim-salve'
Plug 'tpope/vim-dispatch'
Plug 'guns/vim-clojure-static'
Plug 'kien/rainbow_parentheses.vim'
Plug 'venantius/vim-cljfmt'
Plug 'venantius/vim-eastwood'

" go
Plug 'fatih/vim-go'

" markdown
Plug 'plasticboy/vim-markdown'
Plug 'suan/vim-instant-markdown'

" go
Plug 'fatih/vim-go'
Plug 'zchee/deoplete-go'

" js
Plug 'mattn/emmet-vim'
Plug 'elzr/vim-json'

" python
Plug 'python-mode/python-mode'

" writing
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'

" execution
Plug 'thinca/vim-quickrun'


call plug#end()


" ---
" l&f
" ---

syntax enable

filetype plugin indent on

set background=dark
nnoremap <F11> :let &background = ( &background == "dark"? "light" : "dark" )<cr>

colorscheme solarized

set hidden
set nofoldenable

set encoding=utf8

set clipboard=unnamed

let mapleader=","

" buffers
nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprevious<CR>

" redraw
nnoremap <leader>l :nohlsearch<cr>:diffupdate<cr>:syntax sync fromstart<cr><c-l>

" shifting
xnoremap <  <gv
xnoremap >  >gv

" empty lines
nnoremap [<space>  :<c-u>put! =repeat(nr2char(10), v:count1)<cr>'[
nnoremap ]<space>  :<c-u>put =repeat(nr2char(10), v:count1)<cr>

" airline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tmuxline#enabled = 0
let g:airline_theme='jellybeans'
let g:airline_powerline_fonts = 1


" indents
set tabstop=2 softtabstop=2 expandtab shiftwidth=2 smarttab
au FileType java,groovy setlocal shiftwidth=4 tabstop=4

au BufEnter * EnableStripWhitespaceOnSave

" execution
nnoremap <F5> :QuickRun<cr>

" navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>


" --------
" deoplete
" --------

let g:deoplete#enable_at_startup = 1
"let g:deoplete#keyword_patterns = {}
"let g:deoplete#keyword_patterns.clojure = '[\w!$%&*+/:<=>?@\^_~\-\.#]*'


" ----
" goyo
" ----

au! User GoyoEnter Limelight
au! User GoyoLeave Limelight!

nnoremap <F3> :Goyo<CR>


" ------
" python
" ------

let g:pymode_options_colorcolumn = 0
let g:pymode_python = 'python3'

let g:python_host_prog = '/usr/local/bin/python'
let g:python3_host_prog = '/usr/local/bin/python3'

" disable autodoc
set completeopt=menu


" --------
" snippets
" --------

let g:UltiSnipsExpandTrigger="<c-e>"


" --
" go
" --

au FileType go nmap gt <Plug>(go-test)
au FileType go nmap gD <Plug>(go-doc)
au FileType go nmap gi <Plug>(go-info)
au FileType go nmap ga <Plug>(go-alternate-edit)
au FileType go nmap gc <Plug>(go-coverage-toggle)
au FileType go nmap gr <Plug>(go-rename)


" ------
" syntax
" ------

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0


" -------
" folding
" -------

set foldmethod=syntax
set nofoldenable

nnoremap <Space> za


" -------
" tagging
" -------

nnoremap <F8> :TagbarToggle<CR>

let g:easytags_async = 1
let g:easytags_suppress_ctags_warning = 1


" -----
" emmet
" -----

let g:user_emmet_install_global = 0
au FileType html,css EmmetInstall


" ---
" fzf
" ---

nnoremap <silent> <C-f>f :FZF<cr>
nnoremap <silent> <C-f>w :Ag<cr>
nnoremap <silent> <C-f>h :History<cr>
nnoremap <silent> <C-f>c :Commits<cr>
nnoremap <silent> <C-f>b :BCommits<cr>
nnoremap <silent> <C-f>l :BLines<cr>
nnoremap <silent> <C-f>m :Marks<cr>
nnoremap <silent> <C-f>s :Snippets<cr>


" ----------
" file types
" ----------

au BufEnter Vagrantfile :setlocal filetype=ruby
au BufEnter *.json.j2 :setlocal filetype=json


" ---------
" vim files
" ---------

if exists('*mkdir') && (!isdirectory($HOME.'/.vim') || !isdirectory($HOME.'/.vim/files'))
  call mkdir($HOME.'/.vim')
  call mkdir($HOME.'/.vim/files')
  call mkdir($HOME.'/.vim/files/backup')
  call mkdir($HOME.'/.vim/files/swap')
  call mkdir($HOME.'/.vim/files/undo')
  call mkdir($HOME.'/.vim/files/info')
endif

set backup
set backupdir   =$HOME/.vim/files/backup//
set backupext   =-vimbackup
set backupskip  =
set directory   =$HOME/.vim/files/swap//
set updatecount =100
set undofile
set undodir     =$HOME/.vim/files/undo//
set viminfo     ='100,n$HOME/.vim/files/info/viminfo

" jump to last cursor position
au BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif
