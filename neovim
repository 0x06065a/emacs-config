" --------
" vim-plug
" --------

call plug#begin('~/.vim/plugged')


" reset all
Plug 'tpope/vim-sensible'

" l&f
Plug 'mhinz/vim-startify'
Plug 'altercation/vim-colors-solarized'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" vcs
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'gregsexton/gitv'

" search
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" navigation
Plug 'easymotion/vim-easymotion'

" general text editing
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'ervandew/supertab'
Plug 'scrooloose/nerdcommenter'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'wakatime/vim-wakatime'
Plug 'vim-syntastic/syntastic'
Plug 'jeetsukumaran/vim-filebeagle'

" clojure
Plug 'clojure-vim/async-clj-omni'
Plug 'tpope/vim-sexp-mappings-for-regular-people'
Plug 'guns/vim-sexp'
Plug 'tpope/vim-fireplace'
Plug 'tpope/vim-salve'
Plug 'tpope/vim-dispatch'
Plug 'guns/vim-clojure-static'
Plug 'kien/rainbow_parentheses.vim'
Plug 'venantius/vim-cljfmt'
Plug 'venantius/vim-eastwood'

" js
Plug 'mattn/emmet-vim'

" writing
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'


call plug#end()


" ---
" l&f
" ---

runtime! plugin/sensible.vim " override vim-sensible defaults

syntax enable

filetype plugin indent on

set background=dark
colorscheme solarized

set hidden
set nofoldenable

set encoding=utf8

set clipboard=unnamed

let mapleader=","

" buffers
:nnoremap <Tab> :bnext<CR>
:nnoremap <S-Tab> :bprevious<CR>

" redraw
nnoremap <leader>l :nohlsearch<cr>:diffupdate<cr>:syntax sync fromstart<cr><c-l>

" shifting
xnoremap <  <gv
xnoremap >  >gv

" empty lines
nnoremap [<space>  :<c-u>put! =repeat(nr2char(10), v:count1)<cr>'[
nnoremap ]<space>  :<c-u>put =repeat(nr2char(10), v:count1)<cr>

" airline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tmuxline#enabled = 0
let g:airline_theme='jellybeans'

" indents

set tabstop=2 softtabstop=2 expandtab shiftwidth=2 smarttab

autocmd FileType java,groovy setlocal shiftwidth=4 tabstop=4


" --------
" deoplete
" --------

let g:deoplete#enable_at_startup = 1
let g:deoplete#keyword_patterns = {}
let g:deoplete#keyword_patterns.clojure = '[\w!$%&*+/:<=>?@\^_~\-\.#]*'


" ----
" goyo
" ----

autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!


" ------
" syntax
" ------

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0


" -----
" emmet
" -----

let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall


" ----
" java
" ----

:autocmd FileType java nnoremap <silent> <buffer> <leader>I :JavaImportOrganize<cr>
:autocmd FileType java nnoremap <silent> <buffer> <leader>U :JUnit *<cr>


" ---
" fzf
" ---


" ---------
" vim files
" ---------

if exists('*mkdir') && !isdirectory($HOME.'/.vim/files')
  call mkdir($HOME.'/.vim/files')
  call mkdir($HOME.'/.vim/files/backup')
  call mkdir($HOME.'/.vim/files/swap')
  call mkdir($HOME.'/.vim/files/undo')
  call mkdir($HOME.'/.vim/files/info')
endif

set backup
set backupdir   =$HOME/.vim/files/backup//
set backupext   =-vimbackup
set backupskip  =
set directory   =$HOME/.vim/files/swap//
set updatecount =100
set undofile
set undodir     =$HOME/.vim/files/undo//
set viminfo     ='100,n$HOME/.vim/files/info/viminfo

" jump to last cursor position
autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif
